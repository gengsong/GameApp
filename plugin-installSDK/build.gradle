plugins {
//    id 'com.android.application'
    id 'com.android.library'
}

android {
    compileSdk 30

    defaultConfig {
        minSdk 21
        targetSdk 30
        versionCode 1
        versionName "1.0"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    testImplementation 'junit:junit:4.13.2'

}


task makeJar(type: Copy) {
    delete 'build/libs/installsdk-1.0.3.jar'
    from('build/intermediates/packaged-classes/aar_main_jar/release/')
    into('build/libs/')
    include('classes.jar')
    rename('classes.jar', 'installsdk-1.0.3.jar')
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease') {
        task.finalizedBy(makeJar)
    }
}




// Task to generate JAR from compiled classes
//task exportJar(type: ZIP) {
//    from 'build/intermediates/compile_library_classes/release/out'
//    include '**/*.class'
//    archiveClassifier.set('')
//    into 'plugin-installSDK/libs'
//    rename { fileName -> 'installsdk-1.0.3.jar' }
//
//    destinationDir = file("$buildDir/libs")
//    archiveBaseName.set('installsdk-1.0.3')
//    archiveExtension.set('jar')
//}


task exportJar(type: Copy) {
    from 'build/intermediates/compile_library_classes/release/out'
    include '**/*.class'
    into 'plugin-installSDK/libs'
    rename { fileName -> 'MyLibrary.jar' }

}

// Ensure the exportJar task runs after the library is assembled
tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease') {
        task.finalizedBy(exportJar)
    }
}